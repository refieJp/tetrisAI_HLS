-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity getRowScores is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    board_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    board_0_ce0 : OUT STD_LOGIC;
    board_0_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    board_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    board_1_ce0 : OUT STD_LOGIC;
    board_1_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    board_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    board_2_ce0 : OUT STD_LOGIC;
    board_2_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    board_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    board_3_ce0 : OUT STD_LOGIC;
    board_3_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    board_4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    board_4_ce0 : OUT STD_LOGIC;
    board_4_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    board_5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    board_5_ce0 : OUT STD_LOGIC;
    board_5_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    board_6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    board_6_ce0 : OUT STD_LOGIC;
    board_6_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    board_7_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    board_7_ce0 : OUT STD_LOGIC;
    board_7_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    board_8_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    board_8_ce0 : OUT STD_LOGIC;
    board_8_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    board_9_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    board_9_ce0 : OUT STD_LOGIC;
    board_9_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    batch3 : IN STD_LOGIC_VECTOR (5 downto 0);
    rowEliminated_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    rowEliminated_ce0 : OUT STD_LOGIC;
    rowEliminated_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    batch31 : IN STD_LOGIC_VECTOR (5 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of getRowScores is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (53 downto 0) := "000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (53 downto 0) := "000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (53 downto 0) := "000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (53 downto 0) := "000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (53 downto 0) := "000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (53 downto 0) := "000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (53 downto 0) := "000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (53 downto 0) := "000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (53 downto 0) := "000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (53 downto 0) := "001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (53 downto 0) := "010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (53 downto 0) := "100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv64_400B8148A1086447 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000001011100000010100100010100001000010000110010001000111";
    constant ap_const_lv64_C009BE3C36D1935E : STD_LOGIC_VECTOR (63 downto 0) := "1100000000001001101111100011110000110110110100011001001101011110";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv64_4024000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000100100000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_266_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_280 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal tmp_10_fu_310_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_10_reg_660 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_13_fu_340_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_13_reg_665 : STD_LOGIC_VECTOR (10 downto 0);
    signal row_1_fu_352_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal row_1_reg_673 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond1_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rowEliminated_load_reg_733 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp2_fu_501_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_reg_742 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp3_fu_513_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp3_reg_747 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp6_fu_525_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp6_reg_752 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp8_fu_537_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp8_reg_757 : STD_LOGIC_VECTOR (1 downto 0);
    signal rowTranCounter_2_s_fu_585_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal elimCounter_2_s_fu_644_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal elimCounter_cast_fu_650_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal rowTranCounter_cast_fu_655_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_277_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_reg_782 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_reg_787 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_272_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_reg_792 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_262_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_reg_797 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal row_reg_224 : STD_LOGIC_VECTOR (4 downto 0);
    signal elimCounter_reg_235 : STD_LOGIC_VECTOR (7 downto 0);
    signal rowTranCounter_reg_247 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_cast_fu_367_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_cast_fu_386_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal grp_fu_266_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_266_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_fu_277_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_286_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_fu_298_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl3_cast_fu_306_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_cast_fu_294_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_fu_316_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_12_fu_328_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_cast_fu_336_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_fu_324_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal row_cast_cast_fu_358_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_14_fu_362_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_15_fu_381_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_s_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_1_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_2_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_3_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_4_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_5_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_6_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_7_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_8_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_9_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_s_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rowTran_1_cast_fu_407_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal rowTran_cast_fu_397_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal rowTran_4_cast_fu_437_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal rowTran_3_cast_fu_427_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal rowTran_2_cast_fu_417_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp4_fu_507_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal rowTran_7_cast_fu_467_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal rowTran_6_cast_fu_457_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal rowTran_5_cast_fu_447_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp7_fu_519_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal rowTran_cast_3_fu_497_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal rowTran_9_cast_fu_487_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal rowTran_8_cast_fu_477_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp9_fu_531_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_543_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp3_cast_fu_546_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp1_fu_549_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp6_cast_fu_559_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp8_cast_fu_562_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp5_fu_565_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp1_cast_fu_555_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp5_cast_fu_571_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_575_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_cast1_fu_581_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp11_fu_591_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp12_fu_602_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp11_cast_fu_598_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp12_cast_fu_608_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp10_fu_612_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp13_fu_622_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp10_cast_fu_618_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp14_cast_fu_630_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_16_fu_634_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_cast_fu_640_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal score_fu_259_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (53 downto 0);

    component elTetris2_fptruncbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component elTetris2_dadd_64cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component elTetris2_dmul_64dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component elTetris2_ddiv_64eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component elTetris2_sitodp_fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    elTetris2_fptruncbkb_U0 : component elTetris2_fptruncbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_5_reg_797,
        dout => score_fu_259_p1);

    elTetris2_dadd_64cud_U1 : component elTetris2_dadd_64cud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_280,
        din1 => tmp_4_reg_792,
        ce => ap_const_logic_1,
        dout => grp_fu_262_p2);

    elTetris2_dmul_64dEe_U2 : component elTetris2_dmul_64dEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_266_p0,
        din1 => grp_fu_266_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_266_p2);

    elTetris2_ddiv_64eOg_U3 : component elTetris2_ddiv_64eOg
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_280,
        din1 => ap_const_lv64_4024000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_272_p2);

    elTetris2_sitodp_fYi_U4 : component elTetris2_sitodp_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_277_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_277_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    elimCounter_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                elimCounter_reg_235 <= elimCounter_2_s_fu_644_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                elimCounter_reg_235 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    rowTranCounter_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                rowTranCounter_reg_247 <= rowTranCounter_2_s_fu_585_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                rowTranCounter_reg_247 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    row_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                row_reg_224 <= row_1_reg_673;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                row_reg_224 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state47))) then
                reg_280 <= grp_fu_266_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                rowEliminated_load_reg_733 <= rowEliminated_q0;
                tmp2_reg_742 <= tmp2_fu_501_p2;
                tmp3_reg_747 <= tmp3_fu_513_p2;
                tmp6_reg_752 <= tmp6_fu_525_p2;
                tmp8_reg_757 <= tmp8_fu_537_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                row_1_reg_673 <= row_1_fu_352_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    tmp_10_reg_660(10 downto 2) <= tmp_10_fu_310_p2(10 downto 2);
                    tmp_13_reg_665(10 downto 2) <= tmp_13_fu_340_p2(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_2_reg_782 <= grp_fu_277_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                tmp_4_reg_792 <= grp_fu_272_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                tmp_5_reg_797 <= grp_fu_262_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_reg_787 <= grp_fu_277_p1;
            end if;
        end if;
    end process;
    tmp_10_reg_660(1 downto 0) <= "00";
    tmp_13_reg_665(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_346_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_346_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state54)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (ap_const_logic_1 = ap_CS_fsm_state54))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= score_fu_259_p1;
    board_0_address0 <= tmp_14_cast_fu_367_p1(10 - 1 downto 0);

    board_0_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            board_0_ce0 <= ap_const_logic_1;
        else 
            board_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    board_1_address0 <= tmp_14_cast_fu_367_p1(10 - 1 downto 0);

    board_1_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            board_1_ce0 <= ap_const_logic_1;
        else 
            board_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    board_2_address0 <= tmp_14_cast_fu_367_p1(10 - 1 downto 0);

    board_2_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            board_2_ce0 <= ap_const_logic_1;
        else 
            board_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    board_3_address0 <= tmp_14_cast_fu_367_p1(10 - 1 downto 0);

    board_3_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            board_3_ce0 <= ap_const_logic_1;
        else 
            board_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    board_4_address0 <= tmp_14_cast_fu_367_p1(10 - 1 downto 0);

    board_4_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            board_4_ce0 <= ap_const_logic_1;
        else 
            board_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    board_5_address0 <= tmp_14_cast_fu_367_p1(10 - 1 downto 0);

    board_5_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            board_5_ce0 <= ap_const_logic_1;
        else 
            board_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    board_6_address0 <= tmp_14_cast_fu_367_p1(10 - 1 downto 0);

    board_6_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            board_6_ce0 <= ap_const_logic_1;
        else 
            board_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    board_7_address0 <= tmp_14_cast_fu_367_p1(10 - 1 downto 0);

    board_7_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            board_7_ce0 <= ap_const_logic_1;
        else 
            board_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    board_8_address0 <= tmp_14_cast_fu_367_p1(10 - 1 downto 0);

    board_8_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            board_8_ce0 <= ap_const_logic_1;
        else 
            board_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    board_9_address0 <= tmp_14_cast_fu_367_p1(10 - 1 downto 0);

    board_9_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            board_9_ce0 <= ap_const_logic_1;
        else 
            board_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    elimCounter_2_s_fu_644_p2 <= std_logic_vector(unsigned(p_cast_fu_640_p1) + unsigned(elimCounter_reg_235));
    elimCounter_cast_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(elimCounter_reg_235),32));
    exitcond1_fu_346_p2 <= "1" when (row_reg_224 = ap_const_lv5_14) else "0";

    grp_fu_266_p0_assign_proc : process(tmp_2_reg_782, tmp_reg_787, ap_CS_fsm_state11, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_266_p0 <= tmp_reg_787;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_266_p0 <= tmp_2_reg_782;
        else 
            grp_fu_266_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_266_p1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_266_p1 <= ap_const_lv64_C009BE3C36D1935E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_266_p1 <= ap_const_lv64_400B8148A1086447;
        else 
            grp_fu_266_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_277_p0_assign_proc : process(elimCounter_cast_fu_650_p1, ap_CS_fsm_state5, rowTranCounter_cast_fu_655_p1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_277_p0 <= rowTranCounter_cast_fu_655_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_277_p0 <= elimCounter_cast_fu_650_p1;
        else 
            grp_fu_277_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    p_cast1_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_575_p2),8));
    p_cast_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_634_p2),8));
    p_shl1_cast_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_328_p3),11));
    p_shl2_cast_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_286_p3),11));
    p_shl3_cast_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_298_p3),11));
    p_shl_cast_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_316_p3),11));
    rowEliminated_address0 <= tmp_15_cast_fu_386_p1(10 - 1 downto 0);

    rowEliminated_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rowEliminated_ce0 <= ap_const_logic_1;
        else 
            rowEliminated_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rowTranCounter_2_s_fu_585_p2 <= std_logic_vector(unsigned(p_cast1_fu_581_p1) + unsigned(rowTranCounter_reg_247));
    rowTranCounter_cast_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rowTranCounter_reg_247),32));
    rowTran_1_cast_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_1_fu_401_p2),2));
    rowTran_2_cast_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_2_fu_411_p2),2));
    rowTran_3_cast_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_3_fu_421_p2),2));
    rowTran_4_cast_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_4_fu_431_p2),2));
    rowTran_5_cast_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_5_fu_441_p2),2));
    rowTran_6_cast_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_6_fu_451_p2),2));
    rowTran_7_cast_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_7_fu_461_p2),2));
    rowTran_8_cast_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_8_fu_471_p2),2));
    rowTran_9_cast_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_9_fu_481_p2),2));
    rowTran_cast_3_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_s_fu_491_p2),2));
    rowTran_cast_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_391_p2),2));
    row_1_fu_352_p2 <= std_logic_vector(unsigned(row_reg_224) + unsigned(ap_const_lv5_1));
    row_cast_cast_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_reg_224),11));
    tmp10_cast_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_fu_612_p2),4));
    tmp10_fu_612_p2 <= std_logic_vector(unsigned(tmp11_cast_fu_598_p1) + unsigned(tmp12_cast_fu_608_p1));
    tmp11_cast_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp11_fu_591_p3),3));
    tmp11_fu_591_p3 <= (rowEliminated_load_reg_733 & ap_const_lv1_0);
    tmp12_cast_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp12_fu_602_p3),3));
    tmp12_fu_602_p3 <= (rowEliminated_load_reg_733 & rowEliminated_load_reg_733);
    tmp13_fu_622_p4 <= ((rowEliminated_load_reg_733 & rowEliminated_load_reg_733) & ap_const_lv1_0);
    tmp14_cast_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp13_fu_622_p4),4));
    tmp1_cast_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_549_p2),4));
    tmp1_fu_549_p2 <= std_logic_vector(unsigned(tmp2_cast_fu_543_p1) + unsigned(tmp3_cast_fu_546_p1));
    tmp2_cast_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_reg_742),3));
    tmp2_fu_501_p2 <= std_logic_vector(unsigned(rowTran_1_cast_fu_407_p1) + unsigned(rowTran_cast_fu_397_p1));
    tmp3_cast_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_reg_747),3));
    tmp3_fu_513_p2 <= std_logic_vector(unsigned(rowTran_2_cast_fu_417_p1) + unsigned(tmp4_fu_507_p2));
    tmp4_fu_507_p2 <= std_logic_vector(unsigned(rowTran_4_cast_fu_437_p1) + unsigned(rowTran_3_cast_fu_427_p1));
    tmp5_cast_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_fu_565_p2),4));
    tmp5_fu_565_p2 <= std_logic_vector(unsigned(tmp6_cast_fu_559_p1) + unsigned(tmp8_cast_fu_562_p1));
    tmp6_cast_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp6_reg_752),3));
    tmp6_fu_525_p2 <= std_logic_vector(unsigned(rowTran_5_cast_fu_447_p1) + unsigned(tmp7_fu_519_p2));
    tmp7_fu_519_p2 <= std_logic_vector(unsigned(rowTran_7_cast_fu_467_p1) + unsigned(rowTran_6_cast_fu_457_p1));
    tmp8_cast_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp8_reg_757),3));
    tmp8_fu_537_p2 <= std_logic_vector(unsigned(rowTran_8_cast_fu_477_p1) + unsigned(tmp9_fu_531_p2));
    tmp9_fu_531_p2 <= std_logic_vector(unsigned(rowTran_cast_3_fu_497_p1) + unsigned(rowTran_9_cast_fu_487_p1));
    tmp_10_fu_310_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_306_p1) + unsigned(p_shl2_cast_fu_294_p1));
    tmp_11_fu_316_p3 <= (batch3 & ap_const_lv4_0);
    tmp_12_fu_328_p3 <= (batch3 & ap_const_lv2_0);
    tmp_13_fu_340_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_336_p1) + unsigned(p_shl_cast_fu_324_p1));
    tmp_14_cast_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_362_p2),32));
    tmp_14_fu_362_p2 <= std_logic_vector(unsigned(tmp_13_reg_665) + unsigned(row_cast_cast_fu_358_p1));
    tmp_15_cast_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_381_p2),32));
    tmp_15_fu_381_p2 <= std_logic_vector(unsigned(tmp_10_reg_660) + unsigned(row_cast_cast_fu_358_p1));
    tmp_16_fu_634_p2 <= std_logic_vector(unsigned(tmp10_cast_fu_618_p1) + unsigned(tmp14_cast_fu_630_p1));
    tmp_6_1_fu_401_p2 <= (board_0_q0 xor board_1_q0);
    tmp_6_2_fu_411_p2 <= (board_1_q0 xor board_2_q0);
    tmp_6_3_fu_421_p2 <= (board_2_q0 xor board_3_q0);
    tmp_6_4_fu_431_p2 <= (board_3_q0 xor board_4_q0);
    tmp_6_5_fu_441_p2 <= (board_4_q0 xor board_5_q0);
    tmp_6_6_fu_451_p2 <= (board_5_q0 xor board_6_q0);
    tmp_6_7_fu_461_p2 <= (board_6_q0 xor board_7_q0);
    tmp_6_8_fu_471_p2 <= (board_7_q0 xor board_8_q0);
    tmp_6_9_fu_481_p2 <= (board_8_q0 xor board_9_q0);
    tmp_6_s_fu_491_p2 <= (board_9_q0 xor ap_const_lv1_1);
    tmp_7_fu_575_p2 <= std_logic_vector(unsigned(tmp1_cast_fu_555_p1) + unsigned(tmp5_cast_fu_571_p1));
    tmp_8_fu_286_p3 <= (batch31 & ap_const_lv4_0);
    tmp_9_fu_298_p3 <= (batch31 & ap_const_lv2_0);
    tmp_s_fu_391_p2 <= (board_0_q0 xor ap_const_lv1_1);
end behav;
