// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module getRowScores (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        board_0_address0,
        board_0_ce0,
        board_0_q0,
        board_1_address0,
        board_1_ce0,
        board_1_q0,
        board_2_address0,
        board_2_ce0,
        board_2_q0,
        board_3_address0,
        board_3_ce0,
        board_3_q0,
        board_4_address0,
        board_4_ce0,
        board_4_q0,
        board_5_address0,
        board_5_ce0,
        board_5_q0,
        board_6_address0,
        board_6_ce0,
        board_6_q0,
        board_7_address0,
        board_7_ce0,
        board_7_q0,
        board_8_address0,
        board_8_ce0,
        board_8_q0,
        board_9_address0,
        board_9_ce0,
        board_9_q0,
        batch3,
        rowEliminated_address0,
        rowEliminated_ce0,
        rowEliminated_q0,
        batch31,
        ap_return
);

parameter    ap_ST_fsm_state1 = 54'd1;
parameter    ap_ST_fsm_state2 = 54'd2;
parameter    ap_ST_fsm_state3 = 54'd4;
parameter    ap_ST_fsm_state4 = 54'd8;
parameter    ap_ST_fsm_state5 = 54'd16;
parameter    ap_ST_fsm_state6 = 54'd32;
parameter    ap_ST_fsm_state7 = 54'd64;
parameter    ap_ST_fsm_state8 = 54'd128;
parameter    ap_ST_fsm_state9 = 54'd256;
parameter    ap_ST_fsm_state10 = 54'd512;
parameter    ap_ST_fsm_state11 = 54'd1024;
parameter    ap_ST_fsm_state12 = 54'd2048;
parameter    ap_ST_fsm_state13 = 54'd4096;
parameter    ap_ST_fsm_state14 = 54'd8192;
parameter    ap_ST_fsm_state15 = 54'd16384;
parameter    ap_ST_fsm_state16 = 54'd32768;
parameter    ap_ST_fsm_state17 = 54'd65536;
parameter    ap_ST_fsm_state18 = 54'd131072;
parameter    ap_ST_fsm_state19 = 54'd262144;
parameter    ap_ST_fsm_state20 = 54'd524288;
parameter    ap_ST_fsm_state21 = 54'd1048576;
parameter    ap_ST_fsm_state22 = 54'd2097152;
parameter    ap_ST_fsm_state23 = 54'd4194304;
parameter    ap_ST_fsm_state24 = 54'd8388608;
parameter    ap_ST_fsm_state25 = 54'd16777216;
parameter    ap_ST_fsm_state26 = 54'd33554432;
parameter    ap_ST_fsm_state27 = 54'd67108864;
parameter    ap_ST_fsm_state28 = 54'd134217728;
parameter    ap_ST_fsm_state29 = 54'd268435456;
parameter    ap_ST_fsm_state30 = 54'd536870912;
parameter    ap_ST_fsm_state31 = 54'd1073741824;
parameter    ap_ST_fsm_state32 = 54'd2147483648;
parameter    ap_ST_fsm_state33 = 54'd4294967296;
parameter    ap_ST_fsm_state34 = 54'd8589934592;
parameter    ap_ST_fsm_state35 = 54'd17179869184;
parameter    ap_ST_fsm_state36 = 54'd34359738368;
parameter    ap_ST_fsm_state37 = 54'd68719476736;
parameter    ap_ST_fsm_state38 = 54'd137438953472;
parameter    ap_ST_fsm_state39 = 54'd274877906944;
parameter    ap_ST_fsm_state40 = 54'd549755813888;
parameter    ap_ST_fsm_state41 = 54'd1099511627776;
parameter    ap_ST_fsm_state42 = 54'd2199023255552;
parameter    ap_ST_fsm_state43 = 54'd4398046511104;
parameter    ap_ST_fsm_state44 = 54'd8796093022208;
parameter    ap_ST_fsm_state45 = 54'd17592186044416;
parameter    ap_ST_fsm_state46 = 54'd35184372088832;
parameter    ap_ST_fsm_state47 = 54'd70368744177664;
parameter    ap_ST_fsm_state48 = 54'd140737488355328;
parameter    ap_ST_fsm_state49 = 54'd281474976710656;
parameter    ap_ST_fsm_state50 = 54'd562949953421312;
parameter    ap_ST_fsm_state51 = 54'd1125899906842624;
parameter    ap_ST_fsm_state52 = 54'd2251799813685248;
parameter    ap_ST_fsm_state53 = 54'd4503599627370496;
parameter    ap_ST_fsm_state54 = 54'd9007199254740992;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] board_0_address0;
output   board_0_ce0;
input  [0:0] board_0_q0;
output  [9:0] board_1_address0;
output   board_1_ce0;
input  [0:0] board_1_q0;
output  [9:0] board_2_address0;
output   board_2_ce0;
input  [0:0] board_2_q0;
output  [9:0] board_3_address0;
output   board_3_ce0;
input  [0:0] board_3_q0;
output  [9:0] board_4_address0;
output   board_4_ce0;
input  [0:0] board_4_q0;
output  [9:0] board_5_address0;
output   board_5_ce0;
input  [0:0] board_5_q0;
output  [9:0] board_6_address0;
output   board_6_ce0;
input  [0:0] board_6_q0;
output  [9:0] board_7_address0;
output   board_7_ce0;
input  [0:0] board_7_q0;
output  [9:0] board_8_address0;
output   board_8_ce0;
input  [0:0] board_8_q0;
output  [9:0] board_9_address0;
output   board_9_ce0;
input  [0:0] board_9_q0;
input  [5:0] batch3;
output  [9:0] rowEliminated_address0;
output   rowEliminated_ce0;
input  [0:0] rowEliminated_q0;
input  [5:0] batch31;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg board_0_ce0;
reg board_1_ce0;
reg board_2_ce0;
reg board_3_ce0;
reg board_4_ce0;
reg board_5_ce0;
reg board_6_ce0;
reg board_7_ce0;
reg board_8_ce0;
reg board_9_ce0;
reg rowEliminated_ce0;

(* fsm_encoding = "none" *) reg   [53:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] grp_fu_266_p2;
reg   [63:0] reg_280;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state47;
wire   [10:0] tmp_10_fu_310_p2;
reg   [10:0] tmp_10_reg_660;
wire   [10:0] tmp_13_fu_340_p2;
reg   [10:0] tmp_13_reg_665;
wire   [4:0] row_1_fu_352_p2;
reg   [4:0] row_1_reg_673;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond1_fu_346_p2;
reg   [0:0] rowEliminated_load_reg_733;
wire    ap_CS_fsm_state3;
wire   [1:0] tmp2_fu_501_p2;
reg   [1:0] tmp2_reg_742;
wire   [1:0] tmp3_fu_513_p2;
reg   [1:0] tmp3_reg_747;
wire   [1:0] tmp6_fu_525_p2;
reg   [1:0] tmp6_reg_752;
wire   [1:0] tmp8_fu_537_p2;
reg   [1:0] tmp8_reg_757;
wire   [7:0] rowTranCounter_2_s_fu_585_p2;
wire    ap_CS_fsm_state4;
wire   [7:0] elimCounter_2_s_fu_644_p2;
wire   [31:0] elimCounter_cast_fu_650_p1;
wire    ap_CS_fsm_state5;
wire   [31:0] rowTranCounter_cast_fu_655_p1;
wire    ap_CS_fsm_state6;
wire   [63:0] grp_fu_277_p1;
reg   [63:0] tmp_2_reg_782;
wire    ap_CS_fsm_state10;
reg   [63:0] tmp_reg_787;
wire    ap_CS_fsm_state11;
wire   [63:0] grp_fu_272_p2;
reg   [63:0] tmp_4_reg_792;
wire   [63:0] grp_fu_262_p2;
reg   [63:0] tmp_5_reg_797;
wire    ap_CS_fsm_state53;
reg   [4:0] row_reg_224;
reg   [7:0] elimCounter_reg_235;
reg   [7:0] rowTranCounter_reg_247;
wire   [31:0] tmp_14_cast_fu_367_p1;
wire   [31:0] tmp_15_cast_fu_386_p1;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state48;
reg   [63:0] grp_fu_266_p0;
reg   [63:0] grp_fu_266_p1;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state17;
reg   [31:0] grp_fu_277_p0;
wire   [9:0] tmp_8_fu_286_p3;
wire   [7:0] tmp_9_fu_298_p3;
wire   [10:0] p_shl3_cast_fu_306_p1;
wire   [10:0] p_shl2_cast_fu_294_p1;
wire   [9:0] tmp_11_fu_316_p3;
wire   [7:0] tmp_12_fu_328_p3;
wire   [10:0] p_shl1_cast_fu_336_p1;
wire   [10:0] p_shl_cast_fu_324_p1;
wire   [10:0] row_cast_cast_fu_358_p1;
wire   [10:0] tmp_14_fu_362_p2;
wire   [10:0] tmp_15_fu_381_p2;
wire   [0:0] tmp_s_fu_391_p2;
wire   [0:0] tmp_6_1_fu_401_p2;
wire   [0:0] tmp_6_2_fu_411_p2;
wire   [0:0] tmp_6_3_fu_421_p2;
wire   [0:0] tmp_6_4_fu_431_p2;
wire   [0:0] tmp_6_5_fu_441_p2;
wire   [0:0] tmp_6_6_fu_451_p2;
wire   [0:0] tmp_6_7_fu_461_p2;
wire   [0:0] tmp_6_8_fu_471_p2;
wire   [0:0] tmp_6_9_fu_481_p2;
wire   [0:0] tmp_6_s_fu_491_p2;
wire   [1:0] rowTran_1_cast_fu_407_p1;
wire   [1:0] rowTran_cast_fu_397_p1;
wire   [1:0] rowTran_4_cast_fu_437_p1;
wire   [1:0] rowTran_3_cast_fu_427_p1;
wire   [1:0] rowTran_2_cast_fu_417_p1;
wire   [1:0] tmp4_fu_507_p2;
wire   [1:0] rowTran_7_cast_fu_467_p1;
wire   [1:0] rowTran_6_cast_fu_457_p1;
wire   [1:0] rowTran_5_cast_fu_447_p1;
wire   [1:0] tmp7_fu_519_p2;
wire   [1:0] rowTran_cast_3_fu_497_p1;
wire   [1:0] rowTran_9_cast_fu_487_p1;
wire   [1:0] rowTran_8_cast_fu_477_p1;
wire   [1:0] tmp9_fu_531_p2;
wire   [2:0] tmp2_cast_fu_543_p1;
wire   [2:0] tmp3_cast_fu_546_p1;
wire   [2:0] tmp1_fu_549_p2;
wire   [2:0] tmp6_cast_fu_559_p1;
wire   [2:0] tmp8_cast_fu_562_p1;
wire   [2:0] tmp5_fu_565_p2;
wire   [3:0] tmp1_cast_fu_555_p1;
wire   [3:0] tmp5_cast_fu_571_p1;
wire   [3:0] tmp_7_fu_575_p2;
wire   [7:0] p_cast1_fu_581_p1;
wire   [1:0] tmp11_fu_591_p3;
wire   [1:0] tmp12_fu_602_p3;
wire   [2:0] tmp11_cast_fu_598_p1;
wire   [2:0] tmp12_cast_fu_608_p1;
wire   [2:0] tmp10_fu_612_p2;
wire   [2:0] tmp13_fu_622_p4;
wire   [3:0] tmp10_cast_fu_618_p1;
wire   [3:0] tmp14_cast_fu_630_p1;
wire   [3:0] tmp_16_fu_634_p2;
wire   [7:0] p_cast_fu_640_p1;
wire   [31:0] score_fu_259_p1;
reg   [53:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 54'd1;
end

elTetris2_fptruncbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
elTetris2_fptruncbkb_U0(
    .din0(tmp_5_reg_797),
    .dout(score_fu_259_p1)
);

elTetris2_dadd_64cud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
elTetris2_dadd_64cud_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_280),
    .din1(tmp_4_reg_792),
    .ce(1'b1),
    .dout(grp_fu_262_p2)
);

elTetris2_dmul_64dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
elTetris2_dmul_64dEe_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_266_p0),
    .din1(grp_fu_266_p1),
    .ce(1'b1),
    .dout(grp_fu_266_p2)
);

elTetris2_ddiv_64eOg #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
elTetris2_ddiv_64eOg_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_280),
    .din1(64'd4621819117588971520),
    .ce(1'b1),
    .dout(grp_fu_272_p2)
);

elTetris2_sitodp_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
elTetris2_sitodp_fYi_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_277_p0),
    .ce(1'b1),
    .dout(grp_fu_277_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        elimCounter_reg_235 <= elimCounter_2_s_fu_644_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        elimCounter_reg_235 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        rowTranCounter_reg_247 <= rowTranCounter_2_s_fu_585_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rowTranCounter_reg_247 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        row_reg_224 <= row_1_reg_673;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        row_reg_224 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state47))) begin
        reg_280 <= grp_fu_266_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        rowEliminated_load_reg_733 <= rowEliminated_q0;
        tmp2_reg_742 <= tmp2_fu_501_p2;
        tmp3_reg_747 <= tmp3_fu_513_p2;
        tmp6_reg_752 <= tmp6_fu_525_p2;
        tmp8_reg_757 <= tmp8_fu_537_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        row_1_reg_673 <= row_1_fu_352_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_10_reg_660[10 : 2] <= tmp_10_fu_310_p2[10 : 2];
        tmp_13_reg_665[10 : 2] <= tmp_13_fu_340_p2[10 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_2_reg_782 <= grp_fu_277_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        tmp_4_reg_792 <= grp_fu_272_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        tmp_5_reg_797 <= grp_fu_262_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_reg_787 <= grp_fu_277_p1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | (1'b1 == ap_CS_fsm_state54))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        board_0_ce0 = 1'b1;
    end else begin
        board_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        board_1_ce0 = 1'b1;
    end else begin
        board_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        board_2_ce0 = 1'b1;
    end else begin
        board_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        board_3_ce0 = 1'b1;
    end else begin
        board_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        board_4_ce0 = 1'b1;
    end else begin
        board_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        board_5_ce0 = 1'b1;
    end else begin
        board_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        board_6_ce0 = 1'b1;
    end else begin
        board_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        board_7_ce0 = 1'b1;
    end else begin
        board_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        board_8_ce0 = 1'b1;
    end else begin
        board_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        board_9_ce0 = 1'b1;
    end else begin
        board_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_266_p0 = tmp_reg_787;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_266_p0 = tmp_2_reg_782;
    end else begin
        grp_fu_266_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_266_p1 = 64'd13837800495899579230;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_266_p1 = 64'd4614924392110515271;
    end else begin
        grp_fu_266_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_277_p0 = rowTranCounter_cast_fu_655_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_277_p0 = elimCounter_cast_fu_650_p1;
    end else begin
        grp_fu_277_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        rowEliminated_ce0 = 1'b1;
    end else begin
        rowEliminated_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_346_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_return = score_fu_259_p1;

assign board_0_address0 = tmp_14_cast_fu_367_p1;

assign board_1_address0 = tmp_14_cast_fu_367_p1;

assign board_2_address0 = tmp_14_cast_fu_367_p1;

assign board_3_address0 = tmp_14_cast_fu_367_p1;

assign board_4_address0 = tmp_14_cast_fu_367_p1;

assign board_5_address0 = tmp_14_cast_fu_367_p1;

assign board_6_address0 = tmp_14_cast_fu_367_p1;

assign board_7_address0 = tmp_14_cast_fu_367_p1;

assign board_8_address0 = tmp_14_cast_fu_367_p1;

assign board_9_address0 = tmp_14_cast_fu_367_p1;

assign elimCounter_2_s_fu_644_p2 = (p_cast_fu_640_p1 + elimCounter_reg_235);

assign elimCounter_cast_fu_650_p1 = elimCounter_reg_235;

assign exitcond1_fu_346_p2 = ((row_reg_224 == 5'd20) ? 1'b1 : 1'b0);

assign p_cast1_fu_581_p1 = tmp_7_fu_575_p2;

assign p_cast_fu_640_p1 = tmp_16_fu_634_p2;

assign p_shl1_cast_fu_336_p1 = tmp_12_fu_328_p3;

assign p_shl2_cast_fu_294_p1 = tmp_8_fu_286_p3;

assign p_shl3_cast_fu_306_p1 = tmp_9_fu_298_p3;

assign p_shl_cast_fu_324_p1 = tmp_11_fu_316_p3;

assign rowEliminated_address0 = tmp_15_cast_fu_386_p1;

assign rowTranCounter_2_s_fu_585_p2 = (p_cast1_fu_581_p1 + rowTranCounter_reg_247);

assign rowTranCounter_cast_fu_655_p1 = rowTranCounter_reg_247;

assign rowTran_1_cast_fu_407_p1 = tmp_6_1_fu_401_p2;

assign rowTran_2_cast_fu_417_p1 = tmp_6_2_fu_411_p2;

assign rowTran_3_cast_fu_427_p1 = tmp_6_3_fu_421_p2;

assign rowTran_4_cast_fu_437_p1 = tmp_6_4_fu_431_p2;

assign rowTran_5_cast_fu_447_p1 = tmp_6_5_fu_441_p2;

assign rowTran_6_cast_fu_457_p1 = tmp_6_6_fu_451_p2;

assign rowTran_7_cast_fu_467_p1 = tmp_6_7_fu_461_p2;

assign rowTran_8_cast_fu_477_p1 = tmp_6_8_fu_471_p2;

assign rowTran_9_cast_fu_487_p1 = tmp_6_9_fu_481_p2;

assign rowTran_cast_3_fu_497_p1 = tmp_6_s_fu_491_p2;

assign rowTran_cast_fu_397_p1 = tmp_s_fu_391_p2;

assign row_1_fu_352_p2 = (row_reg_224 + 5'd1);

assign row_cast_cast_fu_358_p1 = row_reg_224;

assign tmp10_cast_fu_618_p1 = tmp10_fu_612_p2;

assign tmp10_fu_612_p2 = (tmp11_cast_fu_598_p1 + tmp12_cast_fu_608_p1);

assign tmp11_cast_fu_598_p1 = tmp11_fu_591_p3;

assign tmp11_fu_591_p3 = {{rowEliminated_load_reg_733}, {1'd0}};

assign tmp12_cast_fu_608_p1 = tmp12_fu_602_p3;

assign tmp12_fu_602_p3 = {{rowEliminated_load_reg_733}, {rowEliminated_load_reg_733}};

assign tmp13_fu_622_p4 = {{{rowEliminated_load_reg_733}, {rowEliminated_load_reg_733}}, {1'd0}};

assign tmp14_cast_fu_630_p1 = tmp13_fu_622_p4;

assign tmp1_cast_fu_555_p1 = tmp1_fu_549_p2;

assign tmp1_fu_549_p2 = (tmp2_cast_fu_543_p1 + tmp3_cast_fu_546_p1);

assign tmp2_cast_fu_543_p1 = tmp2_reg_742;

assign tmp2_fu_501_p2 = (rowTran_1_cast_fu_407_p1 + rowTran_cast_fu_397_p1);

assign tmp3_cast_fu_546_p1 = tmp3_reg_747;

assign tmp3_fu_513_p2 = (rowTran_2_cast_fu_417_p1 + tmp4_fu_507_p2);

assign tmp4_fu_507_p2 = (rowTran_4_cast_fu_437_p1 + rowTran_3_cast_fu_427_p1);

assign tmp5_cast_fu_571_p1 = tmp5_fu_565_p2;

assign tmp5_fu_565_p2 = (tmp6_cast_fu_559_p1 + tmp8_cast_fu_562_p1);

assign tmp6_cast_fu_559_p1 = tmp6_reg_752;

assign tmp6_fu_525_p2 = (rowTran_5_cast_fu_447_p1 + tmp7_fu_519_p2);

assign tmp7_fu_519_p2 = (rowTran_7_cast_fu_467_p1 + rowTran_6_cast_fu_457_p1);

assign tmp8_cast_fu_562_p1 = tmp8_reg_757;

assign tmp8_fu_537_p2 = (rowTran_8_cast_fu_477_p1 + tmp9_fu_531_p2);

assign tmp9_fu_531_p2 = (rowTran_cast_3_fu_497_p1 + rowTran_9_cast_fu_487_p1);

assign tmp_10_fu_310_p2 = (p_shl3_cast_fu_306_p1 + p_shl2_cast_fu_294_p1);

assign tmp_11_fu_316_p3 = {{batch3}, {4'd0}};

assign tmp_12_fu_328_p3 = {{batch3}, {2'd0}};

assign tmp_13_fu_340_p2 = (p_shl1_cast_fu_336_p1 + p_shl_cast_fu_324_p1);

assign tmp_14_cast_fu_367_p1 = tmp_14_fu_362_p2;

assign tmp_14_fu_362_p2 = (tmp_13_reg_665 + row_cast_cast_fu_358_p1);

assign tmp_15_cast_fu_386_p1 = tmp_15_fu_381_p2;

assign tmp_15_fu_381_p2 = (tmp_10_reg_660 + row_cast_cast_fu_358_p1);

assign tmp_16_fu_634_p2 = (tmp10_cast_fu_618_p1 + tmp14_cast_fu_630_p1);

assign tmp_6_1_fu_401_p2 = (board_0_q0 ^ board_1_q0);

assign tmp_6_2_fu_411_p2 = (board_1_q0 ^ board_2_q0);

assign tmp_6_3_fu_421_p2 = (board_2_q0 ^ board_3_q0);

assign tmp_6_4_fu_431_p2 = (board_3_q0 ^ board_4_q0);

assign tmp_6_5_fu_441_p2 = (board_4_q0 ^ board_5_q0);

assign tmp_6_6_fu_451_p2 = (board_5_q0 ^ board_6_q0);

assign tmp_6_7_fu_461_p2 = (board_6_q0 ^ board_7_q0);

assign tmp_6_8_fu_471_p2 = (board_7_q0 ^ board_8_q0);

assign tmp_6_9_fu_481_p2 = (board_8_q0 ^ board_9_q0);

assign tmp_6_s_fu_491_p2 = (board_9_q0 ^ 1'd1);

assign tmp_7_fu_575_p2 = (tmp1_cast_fu_555_p1 + tmp5_cast_fu_571_p1);

assign tmp_8_fu_286_p3 = {{batch31}, {4'd0}};

assign tmp_9_fu_298_p3 = {{batch31}, {2'd0}};

assign tmp_s_fu_391_p2 = (board_0_q0 ^ 1'd1);

always @ (posedge ap_clk) begin
    tmp_10_reg_660[1:0] <= 2'b00;
    tmp_13_reg_665[1:0] <= 2'b00;
end

endmodule //getRowScores
