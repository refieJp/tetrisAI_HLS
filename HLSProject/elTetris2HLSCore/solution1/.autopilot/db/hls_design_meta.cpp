#include "hls_design_meta.h"
const Port_Property HLS_Design_Meta::port_props[]={
	Port_Property("ap_clk", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_rst_n", 1, hls_in, -1, "", "", 1),
	Port_Property("m_axi_mem_int_AWVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_mem_int_AWREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_mem_int_AWADDR", 32, hls_out, 0, "m_axi", "ADDR", 1),
	Port_Property("m_axi_mem_int_AWID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_mem_int_AWLEN", 8, hls_out, 0, "m_axi", "LEN", 1),
	Port_Property("m_axi_mem_int_AWSIZE", 3, hls_out, 0, "m_axi", "SIZE", 1),
	Port_Property("m_axi_mem_int_AWBURST", 2, hls_out, 0, "m_axi", "BURST", 1),
	Port_Property("m_axi_mem_int_AWLOCK", 2, hls_out, 0, "m_axi", "LOCK", 1),
	Port_Property("m_axi_mem_int_AWCACHE", 4, hls_out, 0, "m_axi", "CACHE", 1),
	Port_Property("m_axi_mem_int_AWPROT", 3, hls_out, 0, "m_axi", "PROT", 1),
	Port_Property("m_axi_mem_int_AWQOS", 4, hls_out, 0, "m_axi", "QOS", 1),
	Port_Property("m_axi_mem_int_AWREGION", 4, hls_out, 0, "m_axi", "REGION", 1),
	Port_Property("m_axi_mem_int_AWUSER", 1, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_mem_int_WVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_mem_int_WREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_mem_int_WDATA", 32, hls_out, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_mem_int_WSTRB", 4, hls_out, 0, "m_axi", "STRB", 1),
	Port_Property("m_axi_mem_int_WLAST", 1, hls_out, 0, "m_axi", "LAST", 1),
	Port_Property("m_axi_mem_int_WID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_mem_int_WUSER", 1, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_mem_int_ARVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_mem_int_ARREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_mem_int_ARADDR", 32, hls_out, 0, "m_axi", "ADDR", 1),
	Port_Property("m_axi_mem_int_ARID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_mem_int_ARLEN", 8, hls_out, 0, "m_axi", "LEN", 1),
	Port_Property("m_axi_mem_int_ARSIZE", 3, hls_out, 0, "m_axi", "SIZE", 1),
	Port_Property("m_axi_mem_int_ARBURST", 2, hls_out, 0, "m_axi", "BURST", 1),
	Port_Property("m_axi_mem_int_ARLOCK", 2, hls_out, 0, "m_axi", "LOCK", 1),
	Port_Property("m_axi_mem_int_ARCACHE", 4, hls_out, 0, "m_axi", "CACHE", 1),
	Port_Property("m_axi_mem_int_ARPROT", 3, hls_out, 0, "m_axi", "PROT", 1),
	Port_Property("m_axi_mem_int_ARQOS", 4, hls_out, 0, "m_axi", "QOS", 1),
	Port_Property("m_axi_mem_int_ARREGION", 4, hls_out, 0, "m_axi", "REGION", 1),
	Port_Property("m_axi_mem_int_ARUSER", 1, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_mem_int_RVALID", 1, hls_in, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_mem_int_RREADY", 1, hls_out, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_mem_int_RDATA", 32, hls_in, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_mem_int_RLAST", 1, hls_in, 0, "m_axi", "LAST", 1),
	Port_Property("m_axi_mem_int_RID", 1, hls_in, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_mem_int_RUSER", 1, hls_in, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_mem_int_RRESP", 2, hls_in, 0, "m_axi", "RESP", 1),
	Port_Property("m_axi_mem_int_BVALID", 1, hls_in, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_mem_int_BREADY", 1, hls_out, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_mem_int_BRESP", 2, hls_in, 0, "m_axi", "RESP", 1),
	Port_Property("m_axi_mem_int_BID", 1, hls_in, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_mem_int_BUSER", 1, hls_in, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_mem_flt_AWVALID", 1, hls_out, 1, "m_axi", "VALID", 1),
	Port_Property("m_axi_mem_flt_AWREADY", 1, hls_in, 1, "m_axi", "READY", 1),
	Port_Property("m_axi_mem_flt_AWADDR", 32, hls_out, 1, "m_axi", "ADDR", 1),
	Port_Property("m_axi_mem_flt_AWID", 1, hls_out, 1, "m_axi", "ID", 1),
	Port_Property("m_axi_mem_flt_AWLEN", 8, hls_out, 1, "m_axi", "LEN", 1),
	Port_Property("m_axi_mem_flt_AWSIZE", 3, hls_out, 1, "m_axi", "SIZE", 1),
	Port_Property("m_axi_mem_flt_AWBURST", 2, hls_out, 1, "m_axi", "BURST", 1),
	Port_Property("m_axi_mem_flt_AWLOCK", 2, hls_out, 1, "m_axi", "LOCK", 1),
	Port_Property("m_axi_mem_flt_AWCACHE", 4, hls_out, 1, "m_axi", "CACHE", 1),
	Port_Property("m_axi_mem_flt_AWPROT", 3, hls_out, 1, "m_axi", "PROT", 1),
	Port_Property("m_axi_mem_flt_AWQOS", 4, hls_out, 1, "m_axi", "QOS", 1),
	Port_Property("m_axi_mem_flt_AWREGION", 4, hls_out, 1, "m_axi", "REGION", 1),
	Port_Property("m_axi_mem_flt_AWUSER", 1, hls_out, 1, "m_axi", "USER", 1),
	Port_Property("m_axi_mem_flt_WVALID", 1, hls_out, 1, "m_axi", "VALID", 1),
	Port_Property("m_axi_mem_flt_WREADY", 1, hls_in, 1, "m_axi", "READY", 1),
	Port_Property("m_axi_mem_flt_WDATA", 32, hls_out, 1, "m_axi", "DATA", 1),
	Port_Property("m_axi_mem_flt_WSTRB", 4, hls_out, 1, "m_axi", "STRB", 1),
	Port_Property("m_axi_mem_flt_WLAST", 1, hls_out, 1, "m_axi", "LAST", 1),
	Port_Property("m_axi_mem_flt_WID", 1, hls_out, 1, "m_axi", "ID", 1),
	Port_Property("m_axi_mem_flt_WUSER", 1, hls_out, 1, "m_axi", "USER", 1),
	Port_Property("m_axi_mem_flt_ARVALID", 1, hls_out, 1, "m_axi", "VALID", 1),
	Port_Property("m_axi_mem_flt_ARREADY", 1, hls_in, 1, "m_axi", "READY", 1),
	Port_Property("m_axi_mem_flt_ARADDR", 32, hls_out, 1, "m_axi", "ADDR", 1),
	Port_Property("m_axi_mem_flt_ARID", 1, hls_out, 1, "m_axi", "ID", 1),
	Port_Property("m_axi_mem_flt_ARLEN", 8, hls_out, 1, "m_axi", "LEN", 1),
	Port_Property("m_axi_mem_flt_ARSIZE", 3, hls_out, 1, "m_axi", "SIZE", 1),
	Port_Property("m_axi_mem_flt_ARBURST", 2, hls_out, 1, "m_axi", "BURST", 1),
	Port_Property("m_axi_mem_flt_ARLOCK", 2, hls_out, 1, "m_axi", "LOCK", 1),
	Port_Property("m_axi_mem_flt_ARCACHE", 4, hls_out, 1, "m_axi", "CACHE", 1),
	Port_Property("m_axi_mem_flt_ARPROT", 3, hls_out, 1, "m_axi", "PROT", 1),
	Port_Property("m_axi_mem_flt_ARQOS", 4, hls_out, 1, "m_axi", "QOS", 1),
	Port_Property("m_axi_mem_flt_ARREGION", 4, hls_out, 1, "m_axi", "REGION", 1),
	Port_Property("m_axi_mem_flt_ARUSER", 1, hls_out, 1, "m_axi", "USER", 1),
	Port_Property("m_axi_mem_flt_RVALID", 1, hls_in, 1, "m_axi", "VALID", 1),
	Port_Property("m_axi_mem_flt_RREADY", 1, hls_out, 1, "m_axi", "READY", 1),
	Port_Property("m_axi_mem_flt_RDATA", 32, hls_in, 1, "m_axi", "DATA", 1),
	Port_Property("m_axi_mem_flt_RLAST", 1, hls_in, 1, "m_axi", "LAST", 1),
	Port_Property("m_axi_mem_flt_RID", 1, hls_in, 1, "m_axi", "ID", 1),
	Port_Property("m_axi_mem_flt_RUSER", 1, hls_in, 1, "m_axi", "USER", 1),
	Port_Property("m_axi_mem_flt_RRESP", 2, hls_in, 1, "m_axi", "RESP", 1),
	Port_Property("m_axi_mem_flt_BVALID", 1, hls_in, 1, "m_axi", "VALID", 1),
	Port_Property("m_axi_mem_flt_BREADY", 1, hls_out, 1, "m_axi", "READY", 1),
	Port_Property("m_axi_mem_flt_BRESP", 2, hls_in, 1, "m_axi", "RESP", 1),
	Port_Property("m_axi_mem_flt_BID", 1, hls_in, 1, "m_axi", "ID", 1),
	Port_Property("m_axi_mem_flt_BUSER", 1, hls_in, 1, "m_axi", "USER", 1),
	Port_Property("s_axi_CTRL_BUS_AWVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CTRL_BUS_AWREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_CTRL_BUS_AWADDR", 6, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CTRL_BUS_WVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CTRL_BUS_WREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_CTRL_BUS_WDATA", 32, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CTRL_BUS_WSTRB", 4, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CTRL_BUS_ARVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CTRL_BUS_ARREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_CTRL_BUS_ARADDR", 6, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CTRL_BUS_RVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_CTRL_BUS_RREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CTRL_BUS_RDATA", 32, hls_out, -1, "", "", 1),
	Port_Property("s_axi_CTRL_BUS_RRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("s_axi_CTRL_BUS_BVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_CTRL_BUS_BREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CTRL_BUS_BRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("interrupt", 1, hls_out, -1, "", "", 1),
};
const char* HLS_Design_Meta::dut_name = "elTetris2";
