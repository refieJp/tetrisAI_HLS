// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __generateBoardMatrcud_H__
#define __generateBoardMatrcud_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct generateBoardMatrcud_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 1;
  static const unsigned AddressRange = 448;
  static const unsigned AddressWidth = 9;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in <sc_lv<AddressWidth> > address1;
sc_core::sc_in <sc_logic> ce1;
sc_core::sc_out <sc_lv<DataWidth> > q1;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(generateBoardMatrcud_ram) {
        ram[0] = "0b1";
        ram[1] = "0b0";
        ram[2] = "0b0";
        ram[3] = "0b0";
        ram[4] = "0b1";
        ram[5] = "0b0";
        ram[6] = "0b0";
        ram[7] = "0b0";
        ram[8] = "0b1";
        ram[9] = "0b0";
        ram[10] = "0b0";
        ram[11] = "0b0";
        ram[12] = "0b1";
        for (unsigned i = 13; i < 28 ; i = i + 1) {
            ram[i] = "0b0";
        }
        for (unsigned i = 28; i < 33 ; i = i + 1) {
            ram[i] = "0b1";
        }
        ram[33] = "0b0";
        ram[34] = "0b0";
        ram[35] = "0b0";
        ram[36] = "0b1";
        ram[37] = "0b0";
        ram[38] = "0b0";
        ram[39] = "0b0";
        ram[40] = "0b1";
        ram[41] = "0b0";
        ram[42] = "0b0";
        ram[43] = "0b0";
        ram[44] = "0b1";
        for (unsigned i = 45; i < 60 ; i = i + 1) {
            ram[i] = "0b0";
        }
        ram[60] = "0b1";
        ram[61] = "0b1";
        ram[62] = "0b1";
        ram[63] = "0b1";
        ram[64] = "0b0";
        ram[65] = "0b0";
        ram[66] = "0b0";
        ram[67] = "0b0";
        ram[68] = "0b1";
        ram[69] = "0b0";
        ram[70] = "0b0";
        ram[71] = "0b0";
        ram[72] = "0b1";
        ram[73] = "0b0";
        ram[74] = "0b0";
        ram[75] = "0b0";
        ram[76] = "0b1";
        ram[77] = "0b1";
        for (unsigned i = 78; i < 90 ; i = i + 1) {
            ram[i] = "0b0";
        }
        ram[90] = "0b1";
        ram[91] = "0b0";
        ram[92] = "0b1";
        ram[93] = "0b1";
        ram[94] = "0b1";
        for (unsigned i = 95; i < 100 ; i = i + 1) {
            ram[i] = "0b0";
        }
        ram[100] = "0b1";
        ram[101] = "0b1";
        ram[102] = "0b0";
        ram[103] = "0b0";
        ram[104] = "0b0";
        ram[105] = "0b1";
        ram[106] = "0b0";
        ram[107] = "0b0";
        ram[108] = "0b0";
        ram[109] = "0b1";
        for (unsigned i = 110; i < 120 ; i = i + 1) {
            ram[i] = "0b0";
        }
        ram[120] = "0b1";
        ram[121] = "0b1";
        ram[122] = "0b1";
        ram[123] = "0b0";
        ram[124] = "0b1";
        for (unsigned i = 125; i < 133 ; i = i + 1) {
            ram[i] = "0b0";
        }
        ram[133] = "0b1";
        ram[134] = "0b0";
        ram[135] = "0b0";
        ram[136] = "0b0";
        ram[137] = "0b1";
        ram[138] = "0b0";
        ram[139] = "0b0";
        ram[140] = "0b1";
        ram[141] = "0b1";
        for (unsigned i = 142; i < 152 ; i = i + 1) {
            ram[i] = "0b0";
        }
        ram[152] = "0b1";
        ram[153] = "0b1";
        ram[154] = "0b1";
        ram[155] = "0b0";
        ram[156] = "0b0";
        ram[157] = "0b0";
        ram[158] = "0b1";
        for (unsigned i = 159; i < 164 ; i = i + 1) {
            ram[i] = "0b0";
        }
        ram[164] = "0b1";
        ram[165] = "0b1";
        ram[166] = "0b0";
        ram[167] = "0b0";
        ram[168] = "0b1";
        ram[169] = "0b0";
        ram[170] = "0b0";
        ram[171] = "0b0";
        ram[172] = "0b1";
        for (unsigned i = 173; i < 184 ; i = i + 1) {
            ram[i] = "0b0";
        }
        ram[184] = "0b1";
        ram[185] = "0b0";
        ram[186] = "0b0";
        ram[187] = "0b0";
        ram[188] = "0b1";
        ram[189] = "0b1";
        ram[190] = "0b1";
        for (unsigned i = 191; i < 196 ; i = i + 1) {
            ram[i] = "0b0";
        }
        ram[196] = "0b1";
        ram[197] = "0b0";
        ram[198] = "0b0";
        ram[199] = "0b0";
        ram[200] = "0b1";
        ram[201] = "0b1";
        ram[202] = "0b0";
        ram[203] = "0b0";
        ram[204] = "0b0";
        ram[205] = "0b1";
        for (unsigned i = 206; i < 217 ; i = i + 1) {
            ram[i] = "0b0";
        }
        ram[217] = "0b1";
        ram[218] = "0b1";
        ram[219] = "0b0";
        ram[220] = "0b1";
        ram[221] = "0b1";
        for (unsigned i = 222; i < 228 ; i = i + 1) {
            ram[i] = "0b0";
        }
        ram[228] = "0b1";
        ram[229] = "0b0";
        ram[230] = "0b0";
        ram[231] = "0b0";
        ram[232] = "0b1";
        ram[233] = "0b1";
        ram[234] = "0b0";
        ram[235] = "0b0";
        ram[236] = "0b0";
        ram[237] = "0b1";
        for (unsigned i = 238; i < 249 ; i = i + 1) {
            ram[i] = "0b0";
        }
        ram[249] = "0b1";
        ram[250] = "0b1";
        ram[251] = "0b0";
        ram[252] = "0b1";
        ram[253] = "0b1";
        for (unsigned i = 254; i < 261 ; i = i + 1) {
            ram[i] = "0b0";
        }
        ram[261] = "0b1";
        ram[262] = "0b0";
        ram[263] = "0b0";
        ram[264] = "0b1";
        ram[265] = "0b1";
        ram[266] = "0b0";
        ram[267] = "0b0";
        ram[268] = "0b1";
        for (unsigned i = 269; i < 280 ; i = i + 1) {
            ram[i] = "0b0";
        }
        ram[280] = "0b1";
        ram[281] = "0b1";
        ram[282] = "0b0";
        ram[283] = "0b0";
        ram[284] = "0b0";
        ram[285] = "0b1";
        ram[286] = "0b1";
        for (unsigned i = 287; i < 293 ; i = i + 1) {
            ram[i] = "0b0";
        }
        ram[293] = "0b1";
        ram[294] = "0b0";
        ram[295] = "0b0";
        ram[296] = "0b1";
        ram[297] = "0b1";
        ram[298] = "0b0";
        ram[299] = "0b0";
        ram[300] = "0b1";
        for (unsigned i = 301; i < 312 ; i = i + 1) {
            ram[i] = "0b0";
        }
        ram[312] = "0b1";
        ram[313] = "0b1";
        ram[314] = "0b0";
        ram[315] = "0b0";
        ram[316] = "0b0";
        ram[317] = "0b1";
        ram[318] = "0b1";
        for (unsigned i = 319; i < 328 ; i = i + 1) {
            ram[i] = "0b0";
        }
        ram[328] = "0b1";
        ram[329] = "0b1";
        ram[330] = "0b0";
        ram[331] = "0b0";
        ram[332] = "0b1";
        ram[333] = "0b1";
        for (unsigned i = 334; i < 344 ; i = i + 1) {
            ram[i] = "0b0";
        }
        ram[344] = "0b1";
        ram[345] = "0b1";
        ram[346] = "0b0";
        ram[347] = "0b0";
        ram[348] = "0b1";
        ram[349] = "0b1";
        for (unsigned i = 350; i < 360 ; i = i + 1) {
            ram[i] = "0b0";
        }
        ram[360] = "0b1";
        ram[361] = "0b1";
        ram[362] = "0b0";
        ram[363] = "0b0";
        ram[364] = "0b1";
        ram[365] = "0b1";
        for (unsigned i = 366; i < 376 ; i = i + 1) {
            ram[i] = "0b0";
        }
        ram[376] = "0b1";
        ram[377] = "0b1";
        ram[378] = "0b0";
        ram[379] = "0b0";
        ram[380] = "0b1";
        ram[381] = "0b1";
        for (unsigned i = 382; i < 388 ; i = i + 1) {
            ram[i] = "0b0";
        }
        ram[388] = "0b1";
        ram[389] = "0b0";
        ram[390] = "0b0";
        ram[391] = "0b0";
        ram[392] = "0b1";
        ram[393] = "0b1";
        ram[394] = "0b0";
        ram[395] = "0b0";
        ram[396] = "0b1";
        for (unsigned i = 397; i < 409 ; i = i + 1) {
            ram[i] = "0b0";
        }
        ram[409] = "0b1";
        ram[410] = "0b0";
        ram[411] = "0b0";
        ram[412] = "0b1";
        ram[413] = "0b1";
        ram[414] = "0b1";
        for (unsigned i = 415; i < 421 ; i = i + 1) {
            ram[i] = "0b0";
        }
        ram[421] = "0b1";
        ram[422] = "0b0";
        ram[423] = "0b0";
        ram[424] = "0b1";
        ram[425] = "0b1";
        ram[426] = "0b0";
        ram[427] = "0b0";
        ram[428] = "0b0";
        ram[429] = "0b1";
        for (unsigned i = 430; i < 440 ; i = i + 1) {
            ram[i] = "0b0";
        }
        ram[440] = "0b1";
        ram[441] = "0b1";
        ram[442] = "0b1";
        ram[443] = "0b0";
        ram[444] = "0b0";
        ram[445] = "0b1";
        ram[446] = "0b0";
        ram[447] = "0b0";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();


SC_METHOD(prc_write_1);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


void prc_write_1()
{
    if (ce1.read() == sc_dt::Log_1) 
    {
            if(address1.read().is_01() && address1.read().to_uint()<AddressRange)
              q1 = ram[address1.read().to_uint()];
            else
              q1 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(generateBoardMatrcud) {


static const unsigned DataWidth = 1;
static const unsigned AddressRange = 448;
static const unsigned AddressWidth = 9;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in <sc_lv<AddressWidth> > address1;
sc_core::sc_in<sc_logic> ce1;
sc_core::sc_out <sc_lv<DataWidth> > q1;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


generateBoardMatrcud_ram* meminst;


SC_CTOR(generateBoardMatrcud) {
meminst = new generateBoardMatrcud_ram("generateBoardMatrcud_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->address1(address1);
meminst->ce1(ce1);
meminst->q1(q1);

meminst->reset(reset);
meminst->clk(clk);
}
~generateBoardMatrcud() {
    delete meminst;
}


};//endmodule
#endif
