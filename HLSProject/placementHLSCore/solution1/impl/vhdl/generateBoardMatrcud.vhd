-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity generateBoardMatrcud_rom is 
    generic(
             dwidth     : integer := 1; 
             awidth     : integer := 9; 
             mem_size    : integer := 448
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          addr1      : in std_logic_vector(awidth-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of generateBoardMatrcud_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr1_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "1", 1 to 3=> "0", 4 => "1", 5 to 7=> "0", 8 => "1", 9 to 11=> "0", 12 => "1", 
    13 to 27=> "0", 28 to 32=> "1", 33 to 35=> "0", 36 => "1", 37 to 39=> "0", 40 => "1", 41 to 43=> "0", 
    44 => "1", 45 to 59=> "0", 60 to 63=> "1", 64 to 67=> "0", 68 => "1", 69 to 71=> "0", 72 => "1", 
    73 to 75=> "0", 76 to 77=> "1", 78 to 89=> "0", 90 => "1", 91 => "0", 92 to 94=> "1", 95 to 99=> "0", 
    100 to 101=> "1", 102 to 104=> "0", 105 => "1", 106 to 108=> "0", 109 => "1", 110 to 119=> "0", 120 to 122=> "1", 
    123 => "0", 124 => "1", 125 to 132=> "0", 133 => "1", 134 to 136=> "0", 137 => "1", 138 to 139=> "0", 
    140 to 141=> "1", 142 to 151=> "0", 152 to 154=> "1", 155 to 157=> "0", 158 => "1", 159 to 163=> "0", 164 to 165=> "1", 
    166 to 167=> "0", 168 => "1", 169 to 171=> "0", 172 => "1", 173 to 183=> "0", 184 => "1", 185 to 187=> "0", 
    188 to 190=> "1", 191 to 195=> "0", 196 => "1", 197 to 199=> "0", 200 to 201=> "1", 202 to 204=> "0", 205 => "1", 
    206 to 216=> "0", 217 to 218=> "1", 219 => "0", 220 to 221=> "1", 222 to 227=> "0", 228 => "1", 229 to 231=> "0", 
    232 to 233=> "1", 234 to 236=> "0", 237 => "1", 238 to 248=> "0", 249 to 250=> "1", 251 => "0", 252 to 253=> "1", 
    254 to 260=> "0", 261 => "1", 262 to 263=> "0", 264 to 265=> "1", 266 to 267=> "0", 268 => "1", 269 to 279=> "0", 
    280 to 281=> "1", 282 to 284=> "0", 285 to 286=> "1", 287 to 292=> "0", 293 => "1", 294 to 295=> "0", 296 to 297=> "1", 
    298 to 299=> "0", 300 => "1", 301 to 311=> "0", 312 to 313=> "1", 314 to 316=> "0", 317 to 318=> "1", 319 to 327=> "0", 
    328 to 329=> "1", 330 to 331=> "0", 332 to 333=> "1", 334 to 343=> "0", 344 to 345=> "1", 346 to 347=> "0", 348 to 349=> "1", 
    350 to 359=> "0", 360 to 361=> "1", 362 to 363=> "0", 364 to 365=> "1", 366 to 375=> "0", 376 to 377=> "1", 378 to 379=> "0", 
    380 to 381=> "1", 382 to 387=> "0", 388 => "1", 389 to 391=> "0", 392 to 393=> "1", 394 to 395=> "0", 396 => "1", 
    397 to 408=> "0", 409 => "1", 410 to 411=> "0", 412 to 414=> "1", 415 to 420=> "0", 421 => "1", 422 to 423=> "0", 
    424 to 425=> "1", 426 to 428=> "0", 429 => "1", 430 to 439=> "0", 440 to 442=> "1", 443 to 444=> "0", 445 => "1", 
    446 to 447=> "0" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "select_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "distributed";

attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity generateBoardMatrcud is
    generic (
        DataWidth : INTEGER := 1;
        AddressRange : INTEGER := 448;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of generateBoardMatrcud is
    component generateBoardMatrcud_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    generateBoardMatrcud_rom_U :  component generateBoardMatrcud_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


